head(filt_prioritization$driver)
rsem_file<-system.file("extdata","test_rsem.RData",package="annofusion")
load(rsem_file)
fusion_calls<-filt_prioritization$driver
driver_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
head(driver)
head(driver_fusions$Expressed_genes_fusion)
prioritized_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
filt_fusion_exp_genes<-list("driver"=driver_fusions$Expressed_genes_fusion,"prioritized"=prioritized_fusions$Expressed_genes_fusion)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
filt_fusion_exp_genes<-list("driver"=driver,"prioritized"=prioritized)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
head(driver_fusions$Expressed_genes_fusion,1)
head(driver,1)
head(prioritized,1)
prioritized_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
head(prioritized_fusions$Expressed_genes_fusion,1)
head(prioritized,1)
typeof(prioritized)
typeof(prioritized_fusions)
typeof(driver)
typeof(driver_fusions)
filt_fusion_exp_genes<-list("driver"=driver,"prioritized"=prioritized)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
typeof(driver_fusions$Expressed_genes_fusion)
filt_fusion_exp_genes<-list("driver"=driver_fusions$Expressed_genes_fusion,"prioritized"=prioritized_fusions$Expressed_genes_fusion)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
####### separate low expressing fusions and fusions where gene expression not reported
total_filtered<-filt_fusion_exp_genes$prioritized
total_putativedrivers<-filt_fusion_exp_genes$driver
total_filtered<-total_filtered[,which (colnames(total_filtered) %in% colnames(total_putativedrivers))]
total<-rbind(total_filtered,total_putativedrivers)
colnames(total)
#total <- cbind(total, colsplit(total$FusionName, pattern = '--', names = c("Gene1","Gene2")))
for.table<-total
############### fix gene names and add entrez ids ####################
hs <- org.Hs.eg.db
genes<-c(total_filtered$Gene1A,total_filtered$Gene1B,total_filtered$Gene2A,total_filtered$Gene2B)
my.symbols<-genes
#IGH-@ chnaged to IGH to get Entrez ID
total$Gene1A<-sub("IGH-@", "IGH", total$Gene1A)
total$Gene1B<-sub("IGH-@", "IGH", total$Gene1B)
library("org.Hs.eg.db")
############### fix gene names and add entrez ids ####################
hs <- org.Hs.eg.db
genes<-c(total_filtered$Gene1A,total_filtered$Gene1B,total_filtered$Gene2A,total_filtered$Gene2B)
my.symbols<-genes
#IGH-@ chnaged to IGH to get Entrez ID
total$Gene1A<-sub("IGH-@", "IGH", total$Gene1A)
total$Gene1B<-sub("IGH-@", "IGH", total$Gene1B)
total$Gene2B<-sub("IGH-@", "IGH", total$Gene2B)
total$Gene2A<-sub("IGH-@", "IGH", total$Gene2A)
for.table$Gene1A_entrez<-""
for.table$Gene1B_entrez<-""
for.table$Gene2A_entrez<-""
for.table$Gene2B_entrez<-""
# annotate using kinases
kinase <- kinase[-which(kinase$Entrez_Symbol == ""),]
for.table$Gene1A_Kinase <- ifelse(for.table$Gene1A %in% kinase$Entrez_Symbol,'Yes', 'No')
for.table$Gene1B_Kinase <- ifelse(for.table$Gene1B %in% kinase$Entrez_Symbol,'Yes', 'No')
for.table$Gene2A_Kinase <- ifelse(for.table$Gene2A %in% kinase$Entrez_Symbol,'Yes', 'No')
for.table$Gene2B_Kinase <- ifelse(for.table$Gene2B %in% kinase$Entrez_Symbol,'Yes', 'No')
for.table$Kinase<-paste0(for.table$Gene1A_Kinase,";",for.table$Gene1B_Kinase,";",for.table$Gene2A_Kinase,";",for.table$Gene2B_Kinase)
head(for.table)
print("Kinase")
table(for.table$Kinase)
# annotate using transcription factors
for.table$Gene1A_TF <- ifelse(for.table$Gene1A %in% tf$V1,'Yes', 'No')
for.table$Gene1B_TF <- ifelse(for.table$Gene1B %in% tf$V1,'Yes', 'No')
for.table$Gene2A_TF <- ifelse(for.table$Gene2A %in% tf$V1 ,'Yes', 'No')
for.table$Gene2B_TF <- ifelse(for.table$Gene2B %in% tf$V1,'Yes', 'No')
for.table$TF<-paste0("",for.table$Gene1A_TF,";",for.table$Gene1B_TF,";",for.table$Gene2A_TF,";",for.table$Gene2B_TF)
print("TF")
table(for.table$TF)
# annotate oncogenic
for.table$Gene1A_is_onco <- ifelse(for.table$Gene1A %in% onco$OncogeneName,'Yes', 'No')
for.table$Gene1B_is_onco <- ifelse(for.table$Gene1B %in% onco$OncogeneName,'Yes', 'No')
for.table$Gene2A_is_onco <- ifelse(for.table$Gene2A %in% onco$OncogeneName,'Yes', 'No')
for.table$Gene2B_is_onco <- ifelse(for.table$Gene2B %in% onco$OncogeneName,'Yes', 'No')
for.table$is_onco<-paste0("",for.table$Gene1A_is_onco,";",for.table$Gene1B_is_onco,";",for.table$Gene2A_is_onco,";",for.table$Gene2B_is_onco)
print("onco")
table(for.table$is_onco)
# annotate tsgs
#for.table$is_TSG <- ifelse(for.table$Gene1A %in% tsg$GeneSymbol |for.table$Gene1B %in% tsg$GeneSymbol|for.table$Gene2A %in% tsg$GeneSymbol| for.table$Gene2B %in% tsg$GeneSymbol, 'Yes', 'No')
for.table$Gene1A_is_TSG <- ifelse(for.table$Gene1A %in% tsgs$GeneSymbol,'Yes', 'No')
for.table$Gene1B_is_TSG <- ifelse(for.table$Gene1B %in% tsgs$GeneSymbol,'Yes', 'No')
for.table$Gene2A_is_TSG <- ifelse(for.table$Gene2A %in% tsgs$GeneSymbol,'Yes', 'No')
for.table$Gene2B_is_TSG <- ifelse(for.table$Gene2B %in% tsgs$GeneSymbol,'Yes', 'No')
print("TSG")
for.table$is_TSG<-paste0("",for.table$Gene1A_is_TSG,";",for.table$Gene1B_is_TSG,";",for.table$Gene2A_is_TSG,";",for.table$Gene2B_is_TSG)
table(for.table$is_TSG)
#tcga fusion
tcga<-separate_rows(tcga,TCGA_fusions,sep=",")
tcga$TCGA_fusions<-gsub("_","--",tcga$TCGA_fusions)
library("reshape2")
library(dplyr)
#tcga fusion
tcga<-separate_rows(tcga,TCGA_fusions,sep=",")
library(tidyr)
#tcga fusion
tcga<-separate_rows(tcga,TCGA_fusions,sep=",")
tcga$TCGA_fusions<-gsub("_","--",tcga$TCGA_fusions)
for.table$in_TCGA <- ifelse(for.table$FusionName %in% tcga$TCGA_fusions,'Yes', 'No')
if(nrow(unique(for.table[-which(for.table$is_TSG == "No;No;No;No" & for.table$is_onco== "No;No;No;No" & for.table$Kinase =="No;No;No;No" & for.table$TF == "No;No;No;No"),])
) >0){
for.table <- unique(for.table[-which(for.table$is_TSG == "No;No;No;No" & for.table$is_onco== "No;No;No;No" & for.table$Kinase =="No;No;No;No" & for.table$TF == "No;No;No;No"),])
}
filt_anno<-for.table
#histology labels
hist.ct <- unique(clin[,c('broad.histology','Sample')])
hist.dt.ct <- unique(clin[,c('broad.histology','Sample')])
hist.ct<-as.data.frame(hist.ct)
hist.dt.ct <- unique(hist.ct %>% dplyr::select(broad.histology) %>% group_by(broad.histology) %>% dplyr::mutate(freq = n()) %>% as.data.frame())
hist.dt.ct$freq <- paste0(hist.dt.ct$broad.histology,' (n=', hist.dt.ct$freq, ')')
colnames(hist.dt.ct)[2] <- 'broad.histology.Label'
#get DriverFusion.txt
# excel tab 1
extab1<-total_filtered
extab1_note<-aggregate(list(extab1$Caller_type), list(extab1$FusionName,extab1$Sample,extab1$broad.histology), paste, collapse=",")
colnames(extab1_note)<-c("FusionName","Sample","broad.histology","Caller_type")
extab1_read<-aggregate(list(extab1$SpanningFragCount,extab1$JunctionReadCount), list(extab1$Sample,extab1$broad.histology,extab1$FusionName) ,sum)
typeof(extab1)
typeof(extab1$SpanningFragCount)
typeof(extab1$JunctionReadCount)
extab1$SpanningFragCount<-as.numeric(extab1$SpanningFragCount)
extab1$JunctionReadCount<-as.numeric(extab1$JunctionReadCount)
extab1_read<-aggregate(list(extab1$SpanningFragCount,extab1$JunctionReadCount), list(extab1$Sample,extab1$broad.histology,extab1$FusionName) ,sum)
roxygen2::roxygenise()
remove.packages("annofusion")
install.packages("~/Documents/annofusion_0.1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(annofusion)
fusion_file<-system.file("extdata", "test_star.tsv", package = "annofusion")
fusion_calls<-read.delim(fusion_file,stringsAsFactors=FALSE)
read_support<-10
caller<-"STARfusion"
filt_read<-filt_read(fusion_calls=fusion_calls,read_support=read_support, caller=caller)
clin<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
filt_read<-merge(filt_read,clin,by="Sample")
fusion_calls<-system.file("extdata","filt_read.RData",package="annofusion")
load(fusion_calls)
####optional##
lit_file<-system.file("extdata", "driver-fusions-v4.txt", package = "annofusion")
lit_fusions<-read.delim(lit_file,stringsAsFactors=FALSE)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
filt_prioritization<-filt_prioritization(fusion_calls=fusion_calls, tsgs=tsgs,onco=onco,tcga=tcga,remove_circularRNA=TRUE)
rsem_file<-system.file("extdata","test_rsem.RData",package="annofusion")
load(rsem_file)
fusion_calls<-filt_prioritization$driver
driver_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
fusion_calls<-filt_prioritization$prioritized
prioritized_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
filt_fusion_exp_genes<-list("driver"=driver_fusions$Expressed_genes_fusion,"prioritized"=prioritized_fusions$Expressed_genes_fusion)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
library("tidyr")
arriba<-read.delim("~/Downloads/bfdb3b10-ad84-411e-a879-3625ce3aa61c.arriba.fusions.tsv",sep="\t",stringsAsFactors = F)
star<-read.delim("~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect.tsv",sep="\t",stringsAsFactors = F)
star<-separate(star,X.FusionName,sep="--",into=c("gene1","gene2"))
star$strand1.gene.fusion.<-paste0(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/.")
star$strand2.gene.fusion.<-paste0(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/.")
star$breakpoint1<-paste(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint2<-paste(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint1<-sub("chr","",star$breakpoint1)
star$breakpoint2<-sub("chr","",star$breakpoint2)
star$distance1<-rep("NA",nrow(star))
star$distance2<-rep("NA",nrow(star))
# differences in transcript annotation in STAR : only has exon/cds sequence in lowercase alpha= gene1 fusion cds and uppercase alpha= gene2 fusion cds.
# transcript annotation for arriba: The breakpoint is represented via a pipe symbol (|). When non-template bases are inserted between the fused genes, these bases are represented as lowercase letters between two pipes. Reference mismatches (SNPs or SNVs) are indicated as lowercase letters, insertions as bases between brackets ([ and ]), deleted bases as one or more dashes (-), introns as three underscores (___), and missing information due to insufficient coverage as an ellipsis (...). Ambiguous positions, such as positions with diverse reference mismatches, are represented as ?.
star$fusion_transcript<-"."
for (i in 1:nrow(star)){
strand1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][3]
print(strand1)
chr1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][1]
loc1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][2]
strand2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][3]
chr2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][1]
loc2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][2]
if(strand1 =="+" & loc1<loc2){
star[i,"direction1"]<-"downstream"
}
if(strand1 =="-" & loc1<loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="+" & loc1>loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="-" & loc1>loc2){
star[i,"direction1"]<-"downstream"
}
if(strand2 =="+" & loc1<loc2){
star[i,"direction2"]<-"downstream"
}
if(strand2 =="-" & loc1<loc2){
star[i,"direction2"]<-"upstream"
}
if(strand2 =="+" & loc1>loc2){
star[i,"direction2"]<-"upstream"
}
if(strand2 =="-" & loc1>loc2){
star[i,"direction2"]<-"downstream"
}
}
is.lower <- "[a-z]"
bk_index <- unlist(lapply(strsplit(star$FUSION_CDS,""),function(x) sum(grepl(pattern = is.lower, x = x))))
star$fusion_transcript<-paste(substr(star$FUSION_CDS,1,bk_index),substr(star$FUSION_CDS,bk_index+1,length(strsplit(star$FUSION_CDS[6],"")[[1]])),sep="|")
star$fusion_transcript<-toupper(star$fusion_transcript)
star$fusion_transcript<-sub("^\\|\\.$","\\.",star$fusion_transcript)
star$confidence<-"low"
star$confidence[6]<-"high"
fusions<-star
colnames(fusions)[colnames(fusions) %in% c("X.gene1", "strand1.gene.fusion.", "strand2.gene.fusion.")] <- c("gene1", "strand1", "strand2")
colnames(fusions)[colnames(fusions) %in% c("X.gene1", "strand1.gene.fusion.", "strand2.gene.fusion.")]
head(star)
colnames(star)[1]<-"X.gene1"
colnames(fusions)[colnames(fusions) %in% c("X.gene1", "strand1.gene.fusion.", "strand2.gene.fusion.")] <- c("gene1", "strand1", "strand2")
fusions$contig1 <- sub(":.*", "", fusions$breakpoint1)
fusions$breakpoint1 <- as.numeric(sub(".*:", "", fusions$breakpoint1, perl=T))
fusions$contig2 <- sub(":.*", "", fusions$breakpoint2)
fusions$breakpoint2 <- as.numeric(sub(".*:", "", fusions$breakpoint2, perl=T))
outputFile<-"~/Downloads/test_draw_arriba.pdf"
pdf(outputFile, onefile=T, width=pdfWidth, height=pdfHeight, title=fusionsFile)
pdfWidth <- as.numeric(parseStringParameter("pdfWidth", args, "11.692"))
pdf(outputFile)
if (nrow(fusions) == 0) {
plot(0, 0, type="l", xaxt="n", yaxt="n", xlab="", ylab="")
text(0, 0, "Error: empty input file\n")
dev.off()
quit("no")
}
# convenience functions to add/remove "chr" prefix
addChr <- function(contig) {
ifelse(contig == "MT", "chrM", paste0("chr", contig))
}
removeChr <- function(contig) {
sub("^chr", "", sub("^chrM", "MT", contig), perl=T)
}
# convenience function to check if a value is between two others
between <- function(value, start, end) {
value >= start & value <= end
}
# insert dummy annotations for dummy genes
if (any(grepl(",", fusions$gene1) | grepl(",", fusions$gene2))) {
intergenicBreakpoints <- rbind(
setNames(fusions[grepl(",", fusions$gene1),c("gene1", "strand1", "contig1", "breakpoint1")], c("gene", "strand", "contig", "breakpoint")),
setNames(fusions[grepl(",", fusions$gene2),c("gene2", "strand2", "contig2", "breakpoint2")], c("gene", "strand", "contig", "breakpoint"))
)
exons <- rbind(exons, data.frame(
contig=intergenicBreakpoints$contig,
type="intergenic",
start=intergenicBreakpoints$breakpoint-1000,
end=intergenicBreakpoints$breakpoint+1000,
strand=".",
attributes="",
geneName=intergenicBreakpoints$gene,
geneID=intergenicBreakpoints$gene,
transcript=intergenicBreakpoints$gene,
exonNumber="intergenic"
))
}
head(fusions,1)
write.table(star,"~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect_arriba.tsv",sep="\t",quote = F,row.names = F)
star[6,]
arriba$fusion_transcript
star[6,]
arriba[grep("BCL2L13", arriba$X.gene1),"fusion_transcript"]
star$X.gene1
arriba$X.gene1
dev.off()
dev.off()
arriba[grep(":22195970",arriba$breakpoint2),]
star[grep(":22195970",star$breakpoint2),]
library("tidyr")
arriba<-read.delim("~/Downloads/bfdb3b10-ad84-411e-a879-3625ce3aa61c.arriba.fusions.tsv",sep="\t",stringsAsFactors = F)
star<-read.delim("~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect.tsv",sep="\t",stringsAsFactors = F)
star<-separate(star,X.FusionName,sep="--",into=c("gene1","gene2"))
star$strand1.gene.fusion.<-paste0(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/.")
star$strand2.gene.fusion.<-paste0(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/.")
star$breakpoint1<-paste(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint2<-paste(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint1<-sub("chr","",star$breakpoint1)
star$breakpoint2<-sub("chr","",star$breakpoint2)
star$distance1<-rep("NA",nrow(star))
star$distance2<-rep("NA",nrow(star))
# differences in transcript annotation in STAR : only has exon/cds sequence in lowercase alpha= gene1 fusion cds and uppercase alpha= gene2 fusion cds.
# transcript annotation for arriba: The breakpoint is represented via a pipe symbol (|). When non-template bases are inserted between the fused genes, these bases are represented as lowercase letters between two pipes. Reference mismatches (SNPs or SNVs) are indicated as lowercase letters, insertions as bases between brackets ([ and ]), deleted bases as one or more dashes (-), introns as three underscores (___), and missing information due to insufficient coverage as an ellipsis (...). Ambiguous positions, such as positions with diverse reference mismatches, are represented as ?.
star$fusion_transcript<-"."
for (i in 1:nrow(star)){
strand1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][3]
print(strand1)
chr1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][1]
loc1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][2]
strand2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][3]
chr2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][1]
loc2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][2]
if(strand1 =="+" & loc1<loc2){
star[i,"direction1"]<-"downstream"
}
if(strand1 =="-" & loc1<loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="+" & loc1>loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="-" & loc1>loc2){
star[i,"direction1"]<-"downstream"
}
if(strand2 =="+" & loc1<loc2){
star[i,"direction2"]<-"upstream"
}
if(strand2 =="-" & loc1<loc2){
star[i,"direction2"]<-"downstream"
}
if(strand2 =="+" & loc1>loc2){
star[i,"direction2"]<-"downstream"
}
if(strand2 =="-" & loc1>loc2){
star[i,"direction2"]<-"upstream"
}
}
is.lower <- "[a-z]"
bk_index <- unlist(lapply(strsplit(star$FUSION_CDS,""),function(x) sum(grepl(pattern = is.lower, x = x))))
star$fusion_transcript<-paste(substr(star$FUSION_CDS,1,bk_index),substr(star$FUSION_CDS,bk_index+1,length(strsplit(star$FUSION_CDS[6],"")[[1]])),sep="|")
star$fusion_transcript<-toupper(star$fusion_transcript)
star$fusion_transcript<-sub("^\\|\\.$","\\.",star$fusion_transcript)
star$confidence<-"low"
star$confidence[6]<-"high"
colnames(star)[1]<-"X.gene1"
write.table(star,"~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect_arriba.tsv",sep="\t",quote = F,row.names = F)
arriba$strand1.gene.fusion.
arriba$strand2.gene.fusion.
arriba[3,]
star
arriba
library(annofusion)
fusion_file<-system.file("extdata", "test_star.tsv", package = "annofusion")
fusion_calls<-read.delim(fusion_file,stringsAsFactors=FALSE)
read_support<-10
caller<-"STARfusion"
filt_read<-filt_read(fusion_calls=fusion_calls,read_support=read_support, caller=caller)
clin<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
filt_read<-merge(filt_read,clin,by="Sample")
fusion_calls<-system.file("extdata","filt_read.RData",package="annofusion")
load(fusion_calls)
####optional##
lit_file<-system.file("extdata", "driver-fusions-v4.txt", package = "annofusion")
lit_fusions<-read.delim(lit_file,stringsAsFactors=FALSE)
tsgs_file<-system.file("extdata", "tsgs.txt", package = "annofusion")
tsgs<-read.delim(tsgs_file,stringsAsFactors=FALSE)
onco_file<-system.file("extdata", "oncogenes.txt", package = "annofusion")
onco<-read.delim(onco_file,stringsAsFactors=FALSE)
tcga_file<-system.file("extdata", "tcga-fusions.txt", package = "annofusion")
tcga<-read.delim(tcga_file,stringsAsFactors=FALSE)
filt_prioritization<-filt_prioritization(fusion_calls=fusion_calls, tsgs=tsgs,onco=onco,tcga=tcga,remove_circularRNA=TRUE)
rsem_file<-system.file("extdata","test_rsem.RData",package="annofusion")
load(rsem_file)
fusion_calls<-filt_prioritization$driver
driver_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
fusion_calls<-filt_prioritization$prioritized
prioritized_fusions<-filt_exp(fusion_calls=fusion_calls,expdata=expdata,clin=clin)
filt_fusion_exp_genes<-list("driver"=driver_fusions$Expressed_genes_fusion,"prioritized"=prioritized_fusions$Expressed_genes_fusion)
kinase_file<-system.file("extdata", "Kincat_Hsap.08.02.txt", package = "annofusion")
kinase<-read.delim(kinase_file,stringsAsFactors=FALSE)
chimerDB_file<-system.file("extdata","ChimerDB3.0_ChimerKB.txt", package = "annofusion")
chimerDB<-read.delim(chimerDB_file)
tf_file<-system.file("extdata","TRANSFAC_TF.txt", package = "annofusion")
tf<-read.delim(tf_file,header=FALSE,stringsAsFactor=FALSE)
clin_file<-system.file("extdata","2019-06-07-pbta-histologies.tsv",package="annofusion")
clin<-read.delim(clin_file,sep="\t",stringsAsFactors=FALSE)
clin$Sample<-paste(clin$sample_id,clin$aliquot_id,sep="_")
fusion_anno(fusion_calls=filt_fusion_exp_genes, tsgs=tsgs,onco=onco,tcga=tcga,kinase=kinase,chimerDB=chimerDB,tf=tf,clin=clin)
library("tidyr")
arriba<-read.delim("~/Downloads/bfdb3b10-ad84-411e-a879-3625ce3aa61c.arriba.fusions.tsv",sep="\t",stringsAsFactors = F)
star<-read.delim("~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect.tsv",sep="\t",stringsAsFactors = F)
star<-separate(star,X.FusionName,sep="--",into=c("gene1","gene2"))
star$strand1.gene.fusion.<-paste0(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/",unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][3])))
star$strand2.gene.fusion.<-paste0(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][3])),"/",unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][3])))
star$breakpoint1<-paste(unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$LeftBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint2<-paste(unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][1])),unlist(lapply(star$RightBreakpoint,function(x) strsplit(x,":")[[1]][2])),sep =":")
star$breakpoint1<-sub("chr","",star$breakpoint1)
star$breakpoint2<-sub("chr","",star$breakpoint2)
star$distance1<-rep("NA",nrow(star))
star$distance2<-rep("NA",nrow(star))
# differences in transcript annotation in STAR : only has exon/cds sequence in lowercase alpha= gene1 fusion cds and uppercase alpha= gene2 fusion cds.
# transcript annotation for arriba: The breakpoint is represented via a pipe symbol (|). When non-template bases are inserted between the fused genes, these bases are represented as lowercase letters between two pipes. Reference mismatches (SNPs or SNVs) are indicated as lowercase letters, insertions as bases between brackets ([ and ]), deleted bases as one or more dashes (-), introns as three underscores (___), and missing information due to insufficient coverage as an ellipsis (...). Ambiguous positions, such as positions with diverse reference mismatches, are represented as ?.
star$fusion_transcript<-"."
for (i in 1:nrow(star)){
strand1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][3]
print(strand1)
chr1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][1]
loc1<-strsplit(star[i,"LeftBreakpoint"],":")[[1]][2]
strand2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][3]
chr2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][1]
loc2<-strsplit(star[i,"RightBreakpoint"],":")[[1]][2]
if(strand1 =="+" & loc1<loc2){
star[i,"direction1"]<-"downstream"
}
if(strand1 =="-" & loc1<loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="+" & loc1>loc2){
star[i,"direction1"]<-"upstream"
}
if(strand1 =="-" & loc1>loc2){
star[i,"direction1"]<-"downstream"
}
if(strand2 =="+" & loc1<loc2){
star[i,"direction2"]<-"upstream"
}
if(strand2 =="-" & loc1<loc2){
star[i,"direction2"]<-"downstream"
}
if(strand2 =="+" & loc1>loc2){
star[i,"direction2"]<-"downstream"
}
if(strand2 =="-" & loc1>loc2){
star[i,"direction2"]<-"upstream"
}
}
is.lower <- "[a-z]"
bk_index <- unlist(lapply(strsplit(star$FUSION_CDS,""),function(x) sum(grepl(pattern = is.lower, x = x))))
star$fusion_transcript<-paste(substr(star$FUSION_CDS,1,bk_index),substr(star$FUSION_CDS,bk_index+1,length(strsplit(star$FUSION_CDS[6],"")[[1]])),sep="|")
star$fusion_transcript<-toupper(star$fusion_transcript)
star$fusion_transcript<-sub("^\\|\\.$","\\.",star$fusion_transcript)
star$confidence<-"low"
star$confidence[6]<-"high"
colnames(star)[1]<-"X.gene1"
write.table(star,"~/Downloads/0ad46fdb-fae3-4098-aca1-5ad2fd48d4a2.STAR.fusion_predictions.abridged.coding_effect_arriba.tsv",sep="\t",quote = F,row.names = F)
install.packages("~/Documents/annofusion_0.1.1.tgz", repos = NULL, type = .Platform$pkgType)
library(annofusion)
